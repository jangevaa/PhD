"""events.py - a module to generate events relevant to disease dynamics"""

import numpy as np
import pandas as pd

def init_infect(indvs, n):
    """Create `n` initial infections (i.e. at time 0) within your described population (e.g. individuals generated by
    `unif_indvs`)
    """
    return np.random.choice(indvs.index, size=n, replace=False))

def event_db(n, pop):
    """Create an event database, and with `n` initial infection events, based on a specified population, `pop`."""
    return pd.DataFrame({"time":np.repeat(0, n), 
                         "ind_ID":np.random.choice(pop.index, size=n, replace=False), 
                         "event_type":np.repeat("infection_status",n), 
                         "event_details":np.repeat("i",n)})
    
def omega_s(pop):
    """Susceptibility function - generate a vector of individual specific susceptibility (e.g. related to individual 
    covariates), currently only a constant (of 1) is supported.
    """
    return np.repeat(1, pop.shape[0])
    
    
def omega_t(pop):
    """Transmissability function - generate a vector of individual specific transmissability (e.g. related to individual
    covariates), currently only a constant (of 1) is supported.
    """
    return np.repeat(1, pop.shape[0])
    
def kappa(pop, event_db, time, alpha, beta):
    """Infection kernel - risk in relation to a measure of seperation of infected and susceptible individuals"""
    infected=np.array(event_db.ind_ID[(event_db.time<time)&(event_db.)]
    
def epsilon(pop, time):
    """Sparks term - infection process which describe some other random behaviour (e.g. infections originating from 
    outside influences). Often assumed as 0, but could be set to be individual, time, and/or epidemic specific
    in some manner. Currently only the zero assumption is supported.
    """
    return np.repeat(0, pop.shape[0])

def si_model(alpha, beta):
    """SI (susceptible, infected) ILM."""

def sir_model(I_dur, alpha, beta):
    """SIR (susceptible, infected, recovered/removed) ILM where the recovery period is constant"""
    
def seir_model(I_dur, alpha, beta):
    """SEIR (susceptible, exposed, infected, recovered/removed) ILM where the latent (exposed), and recovery period 
    are constant
    """